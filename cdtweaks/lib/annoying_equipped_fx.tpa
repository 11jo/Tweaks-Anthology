ACTION_IF remove_spelltrap BEGIN

/* 
basic idea is simple... clone hardcoded spelltrap/deflection graphics, then copy blank BAMs
to replace the originals. Any opcode which blocks/displays the originals is updated to block/display
the clones EXCEPT for the equipping effects that display them with timing = 2.
*/

  // clone existing visuals
  COPY_EXISTING ~spmagglo.bam~ ~override/cdmagglo.bam~
                ~spsturni.bam~ ~override/cdsturni.bam~
                ~spturni2.bam~ ~override/cdturni2.bam~
  COPY_EXISTING ~spmagglo.vvc~ ~override/cdmagglo.vvc~
                ~spsturni.vvc~ ~override/cdsturni.vvc~
                ~spturni2.vvc~ ~override/cdturni2.vvc~
    WRITE_ASCIIE 0x08 ~%DEST_RES%~ #8      

  COPY_EXISTING ~deathwrd.vvc~ ~override~
    WRITE_ASCII 0x08 ~cdmagglo~ #8  
    BUT_ONLY IF_EXISTS              

  COPY_EXISTING ~cut68d.bcs~ ~override~
    DECOMPILE_AND_PATCH BEGIN 
      REPLACE_TEXTUALLY ~spmagglo~ ~cdmagglo~    
    END
    BUT_ONLY IF_EXISTS    
    
  // now blank original visuals  
  COPY ~cdtweaks/bam/spmagglo.bam~ ~override~
       ~cdtweaks/bam/spmagglo.bam~ ~override/spsturni.bam~
       ~cdtweaks/bam/spmagglo.bam~ ~override/spturni2.bam~

END    
          
COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
                          ~^.+\.itm$~ ~override~
                          ~^.+\.spl$~ ~override~
  READ_ASCII 0x00 type (3)
  SET min_size = 0
  PATCH_IF ("%type%" STRING_COMPARE_CASE "spl" = 0) BEGIN
    READ_LONG  0x64 abil_off ELSE 0
    READ_SHORT 0x68 abil_num ELSE 0
    READ_LONG  0x6a fx_off   ELSE 0
    SET counter_offset = 0x70
    SET abil_length    = 0x28
    SET global_loop    = 0
    SET fx_type        = 0
    SET min_size       = 0x72
    SET droppable      = 0
  END ELSE
  PATCH_IF ("%type%" STRING_COMPARE_CASE "itm" = 0) BEGIN
    READ_LONG  0x64 abil_off ELSE 0
    READ_SHORT 0x68 abil_num ELSE 0
    READ_LONG  0x6a fx_off   ELSE 0
    SET counter_offset = 0x70
    SET abil_length    = 0x38
    SET global_loop    = 1
    SET fx_type        = 0
    SET min_size       = 0x72
    READ_BYTE 0x18 flags ELSE 0
    PATCH_IF ((flags BAND BIT2) = BIT2) BEGIN // if droppable, add portrait icons and whatnot
      SET droppable = 1
    END ELSE BEGIN
      SET droppable = 0
    END
  END ELSE
  PATCH_IF ("%type%" STRING_COMPARE_CASE "cre" = 0) BEGIN
    READ_LONG  0x2c4 fx_off ELSE 0
    READ_BYTE 0x33 fx_type ELSE 2
    SET abil_off       = 0
    SET abil_num       = 0
    SET counter_offset = 0x2c8
    SET abil_length    = 0
    SET global_loop    = 1
    SET min_size       = 0x2d4
    SET droppable      = 0
  END
  PATCH_IF ((SOURCE_SIZE >= min_size) AND (min_size != 0)) BEGIN // min_size must get set by file type detection
    SET new_fx = 0
    FOR (index = (0 - global_loop) ; index < abil_num ; ++index) BEGIN
      PATCH_IF (index < 0) BEGIN // if loop through globals needed
        SET abil_fx_idx = 0
      END ELSE BEGIN // otherwise normal ability
        SET counter_offset = (abil_off + 0x1e + (abil_length * index))
        READ_SHORT  (abil_off + 0x20 + (abil_length * index)) abil_fx_idx
        SET abil_fx_idx += new_fx
        WRITE_SHORT (abil_off + 0x20 + (abil_length * index)) (abil_fx_idx)
      END
      READ_SHORT counter_offset counter // fx_num on global loop, otherwise abil_fx_num
      // run one pass purely looking for keys
      FOR (index2 = 0 ; index2 < counter ; ++index2) BEGIN
        READ_SHORT (fx_off        + (0x08 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) opcode
        READ_BYTE  (fx_off + 0x0c + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) timing
        READ_LONG  (fx_off + 0x08 + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) param2
        PATCH_IF ((remove_blur) AND (droppable) AND (opcode = 65) AND (timing = 2) AND (index < 0)) BEGIN // if blur as a global effect with 'while equipped' timing on droppable item, delete
          DELETE_BYTES (fx_off        + (0x08 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) ((0x30 + (0xd8 * fx_type))) // delete effect
          SET new_fx  -= 1
          SET counter -= 1
          SET index2  -= 1
        END ELSE  
        PATCH_IF ((remove_spelltrap) AND ((timing != 2) OR (index >= 0)) AND // needs to be either not a global effect OR not 'while equipped' timing
                  ((opcode = 197) OR (opcode = 198) OR ((opcode > 200) AND (opcode < 206)) OR (opcode = 207) OR (opcode = 223) OR ((opcode > 225) AND (opcode < 229)) OR (opcode = 259) OR (opcode = 299))) BEGIN
          PATCH_IF ((opcode = 201) OR (opcode = 204) OR (opcode = 205) OR (opcode = 223) OR (opcode = 226) OR (opcode = 259)) BEGIN       
            SPRINT visual cdmagglo      
          END ELSE BEGIN      
            SPRINT visual cdturni2     
          END   
          READ_ASCII     (fx_off + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) template ((0x30 + (0xd8 * fx_type))) // read whole effect into a template
          INSERT_BYTES   (fx_off + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) (0x30 + (0xd8 * fx_type))
            WRITE_ASCIIE (fx_off + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) "%template%"  // clones original effect
            WRITE_SHORT  (fx_off        + (0x08 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) 215 // opcode: play visual effect
            WRITE_LONG   (fx_off + 0x04 + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) 0   // param1: blank
            WRITE_LONG   (fx_off + 0x08 + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) 1   // param2: on target, attached
            WRITE_ASCIIE (fx_off + 0x14 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) ~%visual%~ #8 // graphic to be played
          SET new_fx  += 1
          SET counter += 1
          SET index2  += 1
        END ELSE  
        PATCH_IF ((remove_spelltrap) AND (opcode = 291) AND (param2 != 0)) BEGIN // update blocking effect to target new visuals
          READ_ASCII     (fx_off + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) template ((0x30 + (0xd8 * fx_type))) // read whole effect into a template
          PATCH_FOR_EACH visual IN cdmagglo cdturni2 cdsturni BEGIN
            INSERT_BYTES   (fx_off + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) (0x30 + (0xd8 * fx_type))
              WRITE_ASCIIE (fx_off + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) "%template%"  // clones original effect
              WRITE_SHORT  (fx_off        + (0x08 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) 296 // opcode: block visual effect
              WRITE_LONG   (fx_off + 0x04 + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) 0   // param1: blank
              WRITE_LONG   (fx_off + 0x08 + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) 0   // param2: blank
              WRITE_ASCIIE (fx_off + 0x14 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) ~%visual%~ #8 // graphic to be blocked
            SET new_fx  += 1
            SET counter += 1
            SET index2  += 1
          END
        END
      END  
      WRITE_SHORT counter_offset counter
    END
    // for creature files, need to adjust offsets after effects
    PATCH_IF (("%type%" STRING_COMPARE_CASE "cre" = 0) AND (new_fx > 0)) BEGIN // fix offsets for cre files if fx inserted
      PATCH_FOR_EACH offset IN 0x2a0 0x2a8 0x2b0 0x2b8 0x2bc BEGIN
        READ_LONG offset curr_off
        PATCH_IF (fx_off < curr_off) BEGIN
          WRITE_LONG offset (THIS + ((0x30 + (0xd8 * fx_type)) * new_fx))
        END
      END
    END
  END // end file size check
  BUT_ONLY