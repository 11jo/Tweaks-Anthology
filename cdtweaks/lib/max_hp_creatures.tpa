// i've learned that GAME_IS checks in a regexp copy are very slooooow, so...
OUTER_SET class_off = 0x273 // cre v1.0

ACTION_IF GAME_IS ~pst~ BEGIN
  OUTER_SET class_off = 0x317
END

ACTION_IF GAME_IS ~iwd how totlm~ BEGIN
  OUTER_SET class_off = 0x2db // cre v9.0
END

ACTION_IF NOT GAME_IS ~bg1 totsc iwd how totlm iwd2 pst~ BEGIN
  OUTER_SET check_kit = 1
END ELSE BEGIN
  OUTER_SET check_kit = 0
  OUTER_SET kit = 0
END

DEFINE_PATCH_MACRO ~max_hp_creatures~ BEGIN

    READ_SHORT 0x10     dual         // flags for dual-classes
    READ_BYTE 0x234     level_first  // If dual-classed, this value is put in the next field, and this field is set to 1.
    READ_BYTE 0x235     level_second // Highest attained level in secondary class (0-100)
    READ_BYTE 0x236     level_third  // Highest attained level in tertiary class (0-100)
    READ_BYTE class_off class        // V1.0
    PATCH_IF check_kit = 1 BEGIN
      READ_LONG 0x244 kit   // 0x00004000 = trueclass
    END
    SET dicesize_first = 0  // size of die for HP rolls for first class, i.e. 1dX
    SET lastroll_first = 0  // last level for which they get a full die roll for HP for first class
    SET static_first = 0    // fixed HP they get for levels beyond dice rolls for first class
    SET dicesize_second = 0 // size of die for HP rolls for second class, i.e. 1dX
    SET lastroll_second = 0 // last level for which they get a full die roll for HP for second class
    SET static_second = 0   // fixed HP they get for levels beyond dice rolls for second class
    SET dicesize_third = 0  // size of die for HP rolls for third class, i.e. 1dX
    SET lastroll_third = 0  // last level for which they get a full die roll for HP for third class
    SET static_third = 0    // fixed HP they get for levels beyond dice rolls for third class
    SET divide = 1          // divide is only needed for multis

    PATCH_IF ((class = 2) AND (kit = 0x00004000)) BEGIN // barbarian
      SET dicesize_first = 12
      SET lastroll_first = 9
      SET static_first = 3
    END ELSE

    PATCH_IF ((class = 1) OR      // mage
              (class = 19)) BEGIN // sorcerer
      SET dicesize_first = 4
      SET lastroll_first = 10
      SET static_first = 1
    END ELSE

    PATCH_IF ((class = 2) OR      // fighter
              (class = 6) OR      // paladin
              (class = 12)) BEGIN // ranger
      SET dicesize_first = 10
      SET lastroll_first = 9
      SET static_first = 3
    END ELSE

    PATCH_IF ((class = 3) OR      // cleric
              (class = 11) OR     // druid
              (class = 20) OR     // monk
              (class = 21)) BEGIN // shaman
      SET dicesize_first = 8
      SET lastroll_first = 9
      SET static_first = 2
    END ELSE

    PATCH_IF ((class = 4) OR     // thief
              (class = 5)) BEGIN // bard
      SET dicesize_first = 6
      SET lastroll_first = 10
      SET static_first = 1
    END ELSE

    // Multi and dualclasses
    PATCH_IF (class = 7) BEGIN // class = FM
      SET dicesize_first = 10
      SET lastroll_first = 9
      SET static_first = 3
      SET dicesize_second = 4
      SET lastroll_second = 10
      SET static_second = 1
      PATCH_IF ((dual & BIT3) = BIT3) BEGIN // original class: fighter, e.g. f > m dual
        SET lastroll_first = 9
        SET lastroll_second = (10 - level_first)
        SET level_second = (level_second - level_first)
      END ELSE
      PATCH_IF ((dual & BIT4) = BIT4) BEGIN // original class: mage, e.g. m > f dual
        SET lastroll_first = (9 - level_second)
        SET lastroll_second = 10
        SET level_first = (level_first - level_second)
      END ELSE BEGIN // true multiclass
        SET divide = 2
      END
    END ELSE
    PATCH_IF (class = 9) BEGIN // class = FT
      SET dicesize_first = 10
      SET lastroll_first = 9
      SET static_first = 3
      SET dicesize_second = 6
      SET lastroll_second = 10
      SET static_second = 2
      PATCH_IF ((dual & BIT3) = BIT3) BEGIN // original class: fighter, e.g. f > t dual
        SET lastroll_second = (10 - level_first)
        SET level_second = (level_second - level_first)
      END ELSE
      PATCH_IF ((dual & BIT6) = BIT6) BEGIN // original class: thief, e.g. t > f dual
        SET lastroll_first = (9 - level_second)
        SET level_first = (level_first - level_second)
      END ELSE BEGIN // true multiclass
        SET divide = 2
      END
    END ELSE
    PATCH_IF (class = 8) BEGIN // class = FC
      SET dicesize_first = 10
      SET lastroll_first = 9
      SET static_first = 3
      SET dicesize_second = 8
      SET lastroll_second = 9
      SET static_second = 2
      PATCH_IF ((dual & BIT3) = BIT3) BEGIN // original class: fighter, e.g. f > c dual
        SET lastroll_second = (9 - level_first)
        SET level_second = (level_second - level_first)
      END ELSE
      PATCH_IF ((dual & BIT5) = BIT5) BEGIN // original class: cleric, e.g. c > f dual
        SET lastroll_first = (9 - level_second)
        SET level_first = (level_first - level_second)
      END ELSE BEGIN // true multiclass
        SET divide = 2
      END
    END ELSE

    PATCH_IF (class = 13) BEGIN // class = MT
      SET dicesize_first = 4
      SET lastroll_first = 10
      SET static_first = 1
      SET dicesize_second = 6
      SET lastroll_second = 10
      SET static_second = 2
      PATCH_IF ((dual & BIT4) = BIT4) BEGIN // original class: mage, e.g. m > t dual
        SET lastroll_second = (10 - level_first)
        SET level_second = (level_second - level_first)
      END ELSE
      PATCH_IF ((dual & BIT6) = BIT6) BEGIN // original class: thief, e.g. t > m dual
        SET lastroll_first = (10 - level_second)
        SET level_first = (level_first - level_second)
      END ELSE BEGIN // true multiclass
        SET divide = 2
      END
    END ELSE

    PATCH_IF (class = 15) BEGIN // class = CT
      SET dicesize_first = 8
      SET lastroll_first = 9
      SET static_first = 2
      SET dicesize_second = 6
      SET lastroll_second = 10
      SET static_second = 2
      PATCH_IF ((dual & BIT5) = BIT5) BEGIN // original class: cleric, e.g. c > t dual
        SET lastroll_second = (10 - level_first)
        SET level_second = (level_second - level_first)
      END ELSE
      PATCH_IF ((dual & BIT6) = BIT6) BEGIN // original class: thief, e.g. t > c dual
        SET lastroll_first = (9 - level_second)
        SET level_first = (level_first - level_second)
      END ELSE BEGIN // true multiclass
        SET divide = 2
      END
    END ELSE
    PATCH_IF (class = 14) BEGIN // class = CM
      SET dicesize_first = 8
      SET lastroll_first = 9
      SET static_first = 2
      SET dicesize_second = 4
      SET lastroll_second = 10
      SET static_second = 1
      PATCH_IF ((dual & BIT5) = BIT5) BEGIN // original class: cleric, e.g. c > m dual
        SET lastroll_second = (10 - level_first)
        SET level_second = (level_second - level_first)
      END ELSE
      PATCH_IF ((dual & BIT4) = BIT4) BEGIN // original class: mage, e.g. m > c dual
        SET lastroll_first = (9 - level_second)
        SET level_first = (level_first - level_second)
      END ELSE BEGIN // true multiclass
        SET divide = 2
      END
    END ELSE
    PATCH_IF (class = 16) BEGIN // class = FD
      SET dicesize_first = 10
      SET lastroll_first = 9
      SET static_first = 3
      SET dicesize_second = 8
      SET lastroll_second = 9
      SET static_second = 2
      PATCH_IF ((dual & BIT3) = BIT3) BEGIN // original class: fighter, e.g. f > d dual
        SET lastroll_second = (9 - level_first)
        SET level_second = (level_second - level_first)
      END ELSE
      PATCH_IF ((dual & BIT7) = BIT7) BEGIN // original class: druid, e.g. d > f dual
        SET lastroll_first = (9 - level_second)
        SET level_first = (level_first - level_second)
      END ELSE BEGIN // true multiclass
        SET divide = 2
      END
    END ELSE
    PATCH_IF (class = 18) BEGIN // class = CR
      SET dicesize_first = 8
      SET lastroll_first = 9
      SET static_first = 2
      SET dicesize_second = 10
      SET lastroll_second = 9
      SET static_second = 3
      PATCH_IF ((dual & BIT5) = BIT5) BEGIN // original class: cleric, e.g. c > r dual
        SET lastroll_second = (9 - level_first)
        SET level_second = (level_second - level_first)
      END ELSE
      PATCH_IF ((dual & BIT8) = BIT8) BEGIN // original class: ranger, e.g. r > c dual
        SET lastroll_first = (9 - level_second)
        SET level_first = (level_first - level_second)
      END ELSE BEGIN // true multiclass
        SET divide = 2
      END
    END ELSE
    PATCH_IF (class = 10) BEGIN // class = FMT
      SET dicesize_first = 10
      SET lastroll_first = 9
      SET static_first = 3
      SET dicesize_second = 4
      SET lastroll_second = 10
      SET static_second = 1
      SET dicesize_third = 6
      SET lastroll_third = 10
      SET static_third = 2
      SET divide = 3
    END ELSE
    PATCH_IF (class = 17) BEGIN // class = FMC
      SET dicesize_first = 10
      SET lastroll_first = 9
      SET static_first = 3
      SET dicesize_second = 4
      SET lastroll_second = 10
      SET static_second = 1
      SET dicesize_third = 8
      SET lastroll_third = 9
      SET static_third = 2
      SET divide = 3
    END ELSE BEGIN // if it makes it to here without matching a class then assume it's a monster with standard d8 hit dice
      SET dicesize_first = 8
      SET lastroll_first = 50
    END

    PATCH_IF (level_first < 0) BEGIN // quick fix if this gets adjusted too low by the d/c fixes
      SET level_first = 0
    END
    PATCH_IF (level_second < 0) BEGIN // quick fix if this gets adjusted too low by the d/c fixes
      SET level_second = 0
    END
    PATCH_IF (lastroll_first < 0) BEGIN // quick fix if this gets adjusted too low by the d/c fixes
      SET lastroll_first = 0
    END
    PATCH_IF (lastroll_second < 0) BEGIN // quick fix if this gets adjusted too low by the d/c fixes
      SET lastroll_second = 0
    END

    // if leveled enough to reach static part of hp table, set die rolls to level of last roll and set static rolls for remainder of levels
    PATCH_IF (level_first > lastroll_first) BEGIN
      SET staticrolls_first = (level_first - lastroll_first)
      SET rolls_first = lastroll_first
    END ELSE BEGIN
      SET staticrolls_first = 0
      SET rolls_first = level_first
    END

    PATCH_IF (level_second > lastroll_second) BEGIN
      SET staticrolls_second = (level_second - lastroll_second)
      SET rolls_second = lastroll_second
    END ELSE BEGIN
      SET staticrolls_second = 0
      SET rolls_second = level_second
    END

    PATCH_IF (level_third > lastroll_third) BEGIN
      SET staticrolls_third = (level_third - lastroll_third)
      SET rolls_third = lastroll_third
    END ELSE BEGIN
      SET staticrolls_third = 0
      SET rolls_third = level_third
    END

    SET newhp = ((rolls_first  *  dicesize_first) + (staticrolls_first  *  static_first) + // hp from first class
                 (rolls_second * dicesize_second) + (staticrolls_second * static_second) + // hp from second class
                 (rolls_third  *  dicesize_third) + (staticrolls_third  *  static_third))  // hp from third class
    SET newhp = (newhp / divide)                                                           // adjust if multiclass

    PATCH_IF (newhp > maxhp) BEGIN                   // if new hp is higher than current max, patch it in
      WRITE_SHORT 0x24 ((newhp * currenthp) / maxhp) // sets new current hp and preserves the existing damage 
      WRITE_SHORT 0x26 newhp                         // sets new max
    END

END
